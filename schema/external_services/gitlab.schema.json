{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "external_services/gitlab.schema.json#",
  "title": "GitLab external service connection configuration",
  "description": "Configuration of a connection to a GitLab instance",
  "type": "object",
  "additionalProperties": false,
  "required": ["url", "token"],
  "properties": {
    "url": {
      "description":
        "URL of a GitLab instance, such as https://gitlab.example.com or (for GitLab.com) https://gitlab.com.",
      "type": "string",
      "pattern": "^https?://",
      "not": {
        "type": "string",
        "pattern": "example\\.com"
      },
      "format": "uri",
      "examples": ["https://gitlab.com", "https://gitlab.example.com"]
    },
    "token": {
      "description":
        "A GitLab access token with \"api\" and \"sudo\" scopes. If this token does not have \"sudo\" scope, then you must set `permissions.ignore` to true.",
      "type": "string",
      "pattern": "^[^<>]+$"
    },
    "gitURLType": {
      "description":
        "The type of Git URLs to use for cloning and fetching Git repositories on this GitLab instance.\n\nIf \"http\", Sourcegraph will access GitLab repositories using Git URLs of the form http(s)://gitlab.example.com/myteam/myproject.git (using https: if the GitLab instance uses HTTPS).\n\nIf \"ssh\", Sourcegraph will access GitLab repositories using Git URLs of the form git@example.gitlab.com:myteam/myproject.git. See the documentation for how to provide SSH private keys and known_hosts: https://docs.sourcegraph.com/admin/repo/auth#repositories-that-need-http-s-or-ssh-authentication.",
      "type": "string",
      "enum": ["http", "ssh"],
      "default": "http"
    },
    "certificate": {
      "description": "TLS certificate of a GitLab instance.",
      "type": "string",
      "pattern": "^-----BEGIN CERTIFICATE-----\n"
    },
    "projectQuery": {
      "description":
        "An array of strings specifying which GitLab projects to mirror on Sourcegraph. Each string is a URL query string for the GitLab projects API, such as \"?membership=true&search=foo\".\n\nThe query string is passed directly to GitLab to retrieve the list of projects. The special string \"none\" can be used as the only element to disable this feature. Projects matched by multiple query strings are only imported once. See https://docs.gitlab.com/ee/api/projects.html#list-all-projects for available query string options.",
      "type": "array",
      "default": ["?membership=true"],
      "items": {
        "type": "string"
      }
    },
    "repositoryPathPattern": {
      "description":
        "The pattern used to generate a the corresponding Sourcegraph repository name for a GitLab project. In the pattern, the variable \"{host}\" is replaced with the GitLab URL's host (such as gitlab.example.com), and \"{pathWithNamespace}\" is replaced with the GitLab project's \"namespace/path\" (such as \"myteam/myproject\").\n\nFor example, if your GitLab is https://gitlab.example.com and your Sourcegraph is https://src.example.com, then a repositoryPathPattern of \"{host}/{pathWithNamespace}\" would mean that a GitLab project at https://gitlab.example.com/myteam/myproject is available on Sourcegraph at https://src.example.com/gitlab.example.com/myteam/myproject.\n\nIt is important that the Sourcegraph repository name generated with this pattern be unique to this code host. If different code hosts generate repository names that collide, Sourcegraph's behavior is undefined.",
      "type": "string",
      "default": "{host}/{pathWithNamespace}"
    },
    "initialRepositoryEnablement": {
      "description":
        "Defines whether repositories from this GitLab instance should be enabled and cloned when they are first seen by Sourcegraph. If false, the site admin must explicitly enable GitLab repositories (in the site admin area) to clone them and make them searchable on Sourcegraph. If true, they will be enabled and cloned immediately (subject to rate limiting by GitLab); site admins can still disable them explicitly, and they'll remain disabled.",
      "type": "boolean"
    },
    "authorization": {
      "description":
        "If non-null, enforces GitLab repository permissions. This requires that the value of `token` be an access token with \"sudo\" and \"api\" scopes.",
      "type": "object",
      "additionalProperties": false,
      "required": ["authnProvider"],
      "properties": {
        "authnProvider": {
          "type": "object",
          "additionalProperties": false,
          "required": ["configID", "type", "gitlabProvider"],
          "description": "Identifies the authentication provider to use to identify users to GitLab.",
          "properties": {
            "configID": {
              "type": "string",
              "description": "The value of the `configID` field of the targeted authentication provider."
            },
            "type": {
              "type": "string",
              "description": "The `type` field of the targeted authentication provider."
            },
            "gitlabProvider": {
              "type": "string",
              "description":
                "The provider name that identifies the authentication provider to GitLab. This is the name passed to the `?provider=` query parameter in calls to the GitLab Users API."
            }
          }
        },
        "ttl": {
          "description":
            "The TTL of how long to cache permissions data. This is 3 hours by default.\n\nDecreasing the TTL will increase the load on the code host API. If you have X repos on your instance, it will take ~X/100 API requests to fetch the complete list for 1 user.  If you have Y users, you will incur X*Y/100 API requests per cache refresh period.\n\nIf set to zero, Sourcegraph will sync a user's entire accessible repository list on every request (NOT recommended).",
          "type": "string",
          "default": "3h"
        }
      }
    }
  }
}
